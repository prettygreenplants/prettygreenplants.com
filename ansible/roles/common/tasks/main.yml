---
# tasks file for common

- set_fact:
    dockercloud_api_key: '{{ lookup("env", "DOCKERCLOUD_APIKEY") }}'

- fail:
    msg: 'Please pass environment variable for DOCKERCLOUD_APIKEY'
  when: dockercloud_api_key is not defined or dockercloud_api_key == ''

- name: Set timezone to Phnom Penh
  timezone:
    name: Asia/Phnom_Penh

- name: Update package caches
  apt:
    update_cache: yes

- name: Add repo for letsencrypt
  apt_repository:
    repo: 'ppa:certbot/certbot'
    filename: letsencrypt

- name: Install packages
  apt:
    name: '{{ item }}'
  with_items: '{{ common_packages }}'

- name: Download composer
  get_url:
    url: 'https://getcomposer.org/installer'
    dest: /tmp/installer

- name: Install composer
  shell: cat /tmp/installer | php -- --install-dir=/usr/local/bin --filename=composer
  args:
    creates: /usr/local/bin/composer

- name: Make composer executable
  file:
    path: /usr/local/bin/composer
    mode: 'a+x'
    state: file

- name: Update composer to latest version
  composer:
    command: self-update
    working_dir: /usr/local/bin

- name: Fix permission for composer cache directory
  file:
    path: '/home/{{ www_user }}/.composer'
    state: directory
    owner: '{{ www_user }}'
    group: '{{ www_group }}'
    recurse: yes

- name: Check if letsencrypt certificate exists
  stat:
    path: /etc/letsencrypt/live/prettygreenplants.com/fullchain.pem
  register: letsencrypt_certs

- import_tasks: letsencrypt.yml
  when: letsencrypt_certs.stat.exists == False

- name: Generate ssl certificate
  shell: /usr/bin/letsencrypt certonly --keep --expand --agree-tos -m keo@visay.info -n --webroot -w /etc/letsencrypt/prettygreenplants -d prettygreenplants.com

- name: Install cronjob for generating ssl certificate
  cron:
    name: letsencrypt
    day: 1-5
    hour: 1
    minute: 0
    job: /usr/bin/letsencrypt certonly --keep --expand --agree-tos -m keo@visay.info -n --webroot -w /etc/letsencrypt/prettygreenplants -d prettygreenplants.com

- name: Compile backup script from go
  shell: go build
  args:
    chdir: '{{ playbook_dir }}/../go'
  delegate_to: localhost
  become: false

- name: Make sure backup directory exists
  file:
    path: '{{ item }}'
    owner: '{{ www_user }}'
    group: '{{ www_group }}'
    recurse: yes
    state: directory
  with_items:
    - '/var/www/backup'

- name: Copy backup script to server
  copy:
    src: '{{ playbook_dir }}/../go/go'
    dest: '/var/www/backup/backup'
    mode: 0755
    owner: '{{ www_user }}'
    group: '{{ www_group }}'

- name: Pass docker cloud user as cron variable
  cronvar:
    name: DOCKERCLOUD_USER
    value: 'visay'

- name: Pass docker cloud api key as cron variable
  cronvar:
    name: DOCKERCLOUD_APIKEY
    value: '{{ dockercloud_api_key }}'

- name: Install cronjob for daily backup
  cron:
    name: daily_backup
    hour: 23
    minute: 0
    job: '/var/www/backup/backup'

- name: Create rotate script on the server
  template:
    src: 'rotate.sh.j2'
    dest: '/var/www/backup/rotate.sh'
    mode: 0755
    owner: '{{ www_user }}'
    group: '{{ www_group }}'

- name: Install cronjob for monthly rotate
  cron:
    name: monthly_rotate
    day: 28
    minute: 0
    job: '/var/www/backup/rotate.sh'
