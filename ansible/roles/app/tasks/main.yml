---
# tasks file for ansible/roles/app

- name: Make sure application root exists
  file:
    path: '{{ app_root }}'
    owner: '{{ host_user }}'
    group: '{{ host_group }}'
    recurse: yes
    state: directory
  become: True

- name: Clone app repository into app root
  git:
    accept_hostkey: yes
    dest: '{{ app_root }}'
    force: yes
    repo: '{{ git_repo }}'
    version: '{{ release_version }}'

- name: Install project dependencies
  composer:
    no_dev: '{{ composer_dev_flag }}'
    prefer_dist: yes
    working_dir: '{{ app_root }}/neos'

- name: Setup docker environment file
  template:
    dest: '{{ app_root }}/.env'
    src: env.j2

- name: Setup database connection
  template:
    dest: '{{ app_root }}/neos/Configuration/{{ project_context }}/Settings.yaml'
    src: Settings.yaml.j2

- name: Make sure files and directories permissions are correct
  file:
    path: '{{ app_root }}'
    owner: '{{ host_user }}'
    group: '{{ host_group }}'
    recurse: yes
    state: directory
  become: True

- name: Clean up files and directories
  file:
    path: '{{ app_root }}/neos/{{ item }}'
    state: absent
  with_items: '{{ temp_files }}'

- name: Pull latest docker images defined in docker compose
  shell: 'docker-compose -f docker-compose-{{ ansible_limit }}.yml pull'
  args:
    chdir: '{{ app_root }}'

- name: Start docker containers with docker compose
  shell: 'docker-compose -f docker-compose-{{ ansible_limit }}.yml up -d'
  args:
    chdir: '{{ app_root }}'

- name: Execute cleanup script
  shell: 'docker-compose -f docker-compose-{{ ansible_limit }}.yml run --rm app /cleanup.sh'
  args:
    chdir: '{{ app_root }}'
